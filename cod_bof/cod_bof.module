<?php
/**
 * @file
 * Code for the COD BoF Session feature.
 */

include_once('cod_bof.features.inc');


function cod_bof_menu() {
  $items['program/bofs'] = array(
    'title' => 'BoFs',
    'page arguments' => array('bof_schedule', 'page'),
    'page callback' => 'cod_bof_schedule_tabs',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function cod_bof_schedule_tabs($view_id, $display_id) {
  $days = cod_session_days();
  if (!empty($days)) {
    $tabs = array();
    $cnt = 0;
    foreach($days as $day) {
      $tabs[] = array(
        'title' => $day,
        'type' => 'view',
        'vid' => $view_id,
        'display' => $display_id,
        'args' => cod_session_day_url($day),
        'weight' => $cnt++, // Doesn't properly sort if we provide same values
      );
    }
    $qtoptions = array(
      'style' => 'Basic',
      'ajax' => FALSE,
       );
    $qtname = 'cod_session_tabs';
    $quicktabs = quicktabs_build_quicktabs($qtname,$qtoptions,$tabs);
    return drupal_render($quicktabs['content']);
  }
  else {
    return views_embed_view($view_id, $display_id);
  }
}

/**
 * Theme function to render the schedule grid.
 *
 * Build arrays of schedulable content, visible rooms, and time slots with
 * context-appropriate meta information like available schedulable slots.
 */
function template_preprocess_cod_bof_schedule(&$vars) {
  global $user;
  // Warning, this preprocess function is massive, like Godzilla eating the
  // worlds largest pizza massive. It needs to be refactored and broken apart,
  // but that has not yet happened, or you wouldn't be reading this. Attempts
  // are made to document this code, but proceed and alter at risk.

  // $view->result contains the raw data
  // $vars['rows'] contains the row-formatted fields

  $view = $vars['view'];

  // Save raw row View results keyed on nid.
  $view_results = $scheduled_items = $displayed_node_types = array();
  $node_types = node_type_get_types();
  foreach ($node_types as $type => $content_type) {
    $fields = field_info_instances('node', $type);
    $node_types[$type]->fields = (object) $fields;
  }

  if (!empty($view->result)) {
    foreach ($view->result as $key => $view_result) {
      $node = node_load($view_result->nid);
      $scheduled_items[$node->nid] = $node;
      // $view_results will be what is actually output in the tpl file.
      $view_results[$node->nid] = $vars['rows'][$key];
      // Hold onto node types seen in this View.
      if (!in_array($node->type, $displayed_node_types)) {
        $displayed_node_types[$node->type] = $node_types[$node->type];
      }
    }
  }

  // There is no contextual argument filter, but if a valid day
  // argument is present, we modify the cod_schedule_days
  // to only display that day overriden by the URL.
  if(isset($view->args[0])) {
    foreach ($view->cod_schedule_days as $day_key => $day_value) {
      if(cod_session_day_url($day_value) == $view->args[0]) {
        $view->cod_schedule_days[$day_key] = $day_value;
      } elseif($view->args[0] != 'all') {
        unset($view->cod_schedule_days[$day_key]);
      }
    }
  }

  // Get days of the schedule from the View style setting. This will be used
  // when depicting day links and for determining time slots to appear on this
  // day's grid.
  $all_schedule_days = $view->cod_schedule_days;
  // If an argument is present limit the schedule days.
  $schedule_days = $all_schedule_days;
  if (!empty($view->args[0])) {
    if (array_key_exists($view->args[0], $all_schedule_days)) {
      $schedule_days = array($view->args[0] => $all_schedule_days[$view->args[0]]);
    }
  }

  // Get a list of time slots. The list can be powered by a View, see cod_session_day_slots().
  // The list of sessions is not filtered by this list. A View filter argument should be used for that.
  // @todo this won't allow different Views on the same day to show different time slots (maybe if one was sessions and the other bofs)?
  $time_slots = array();
  foreach ($schedule_days as $day_key => $day) {
    // @todo Because Date does not yet provide granularity for date fields in
    // contextual filters, I've set the second argument to be the date, rather
    // than the key. (I'm thinking that's way the it should work anyway.)
    // -- oadaeh 2012-01-21
    $time_slots = array_merge($time_slots, cod_session_day_slots($view, $day));
    //$time_slots = array_merge($time_slots, cod_session_day_slots($view, $day_key));
  }
  if (empty($time_slots)) {
    // No time slots exist so do not continue.
    return;
  }

  // Get a list of rooms. The list can be powered by the View schedule_room_list
  $rooms = _cod_session_schedule_rooms($view);
  if (empty($rooms)) {
    // No rooms exist so do not continue.
    return;
  }
  else {
    foreach ($rooms as $room_key => $room) {
      $room_node = node_load($room_key);
      if (isset($room_node->field_room_bofs) && $room_node->field_room_bofs[LANGUAGE_NONE][0]['value'] != 1) {
        unset($rooms[$room_key]);
      }
    }
  }

  // Build an array of links to days to display at the top of the grid.
  $day_links = array();
  $current_path = $view->display_handler->display->display_options['path'];
  if (!empty($view->args[0]) && count($all_schedule_days) > 1) {
    foreach ($all_schedule_days as $day_key => $day) {
      // @todo pass along links with attribute information?
      $day_links[] = l($day, $current_path . '/' . $day_key);
    }
  }

  // Build attributes for scheduled items.
  // Consider revising architecture to be taxonomy or node reference to simplify the following.
  $session_attrs = array();
  foreach ($node_types as $type => $type_array) {
    foreach ($type_array->fields as $field) {
      if (in_array($field['widget']['type'], array('options_buttons', 'options_select', 'options_onoff'))) {
        if (!isset($session_attrs[$field['field_name']])) {
          // Allowed values of a field may or may not have machine-readable keys.
          if (!empty($field['settings']['allowed_values_function']) || !empty($field['settings']['allowed_values'])) {
            $allowed_values = list_allowed_values($field);
            $session_attrs[$field['field_name']] = array(
              'name' => $field['field_name'],
              'values' => array_values($allowed_values),
              'keys' => array_keys($allowed_values),
              'machine_keys' => _cod_session_machine_keys($field['field_name'], array_keys($allowed_values)),
            );
          }
        }
      }
    }
  }

  // Create text CCK optionwidgets as attributes of items for CSS usage.
  // @todo review for sanitization
  if (!empty($session_attrs)) {
    foreach ($scheduled_items as $session_nid => $session) {
      foreach ($session_attrs as $field) {
        // See if field exists for particular session node.
        if (is_array($session->$field['name'])) {
          // Field could have multiple instances.
          foreach ($session->$field['name'] as $instance) {
            // Emtpy values are NULL.
            if (isset($instance['value'])) {
              // Create container if doesn't exist.
              if (!isset($scheduled_items[$session_nid]->cod_session_classes)) {
                $scheduled_items[$session_nid]->cod_session_classes = array();
              }
              $key = array_search($instance['value'], $field['values']);
              if ($key === FALSE) {
                // It's possible we've rewritten the keys.
                $key = array_search($instance['value'], $field['keys']);
                if ($key !== FALSE) {
                  $value = $field['values'][$key];
                }
              }
              else {
                $value = $instance['value'];
              }
              if ($key !== FALSE) {
                // Create class based on field key.
                $scheduled_items[$session_nid]->cod_session_classes[$field['machine_keys'][$key]] = $value;
              }
            }
          }
        }
      }
    }
  }

  // Collect capacity information about rooms to inform availability processing.
  $room_nids = array_keys($rooms);
  foreach ($room_nids as $room_nid) {
    // Explicitly get room capacity.
    $node = node_load($room_nid);
    if (!empty($node->field_room_session_capacity)) {
      $capacity = check_plain($node->field_room_session_capacity[LANGUAGE_NONE][0]['value']);
    }
    else {
      $capacity = 1;
    }
    $rooms[$room_nid]['capacity'] = $capacity;
  }

  // Load each slot.
  // @todo This could be malperformant. Consider revising such that all slots
  // are loaded with single query.
  foreach ($time_slots as $slot) {
    $node = node_load($slot->nid);
    $slots[$node->nid] = $node;
  }

  // Create structured grid of scheduled items in format [slot][room][item_nid]
  $used_slots = $item_grid = $used_rooms = $authored = array();

  if (!empty($scheduled_items)) {
    foreach ($scheduled_items as $item) {
      if (!empty($item->field_session_slot['und'][0]['target_id'])) {
        $target_slot = $item->field_session_slot['und'][0]['target_id'];
      }
      if (isset($target_slot) && !empty($item->field_session_room['und'][0]['target_id'])) {
        if (!empty($item->cod_session_classes)) {
          $class = ' ' . implode(' ', array_keys($item->cod_session_classes));
        }
        else {
          $class = '';
        }

        // Handle sessions in multiple rooms.
        foreach ($item->field_session_room['und'] as $room_instance) {
          $item_grid[$target_slot][$room_instance['target_id']][$item->nid]['session'] = $item;
          $item_grid[$target_slot][$room_instance['target_id']][$item->nid]['class'] = $class;
          // Record rooms and used slots.
          $used_rooms[$room_instance['target_id']][] = $target_slot;
        }

      // Create array of populated slots.
        if (!in_array($target_slot, $used_slots)) {
          $used_slots[] = $target_slot;
        }
      }
      // Record sessions for this user, their call-to-action can use it.
      if ($item->uid == $user->uid) {
        $authored[] = $item->nid;
      }
    }

    // Explicitly discover if there are unscheduled sessions by this user if
    // the interactive workflow is enabled.
    if ($view->cod_schedule_interactive) {
      $authored = cod_session_users_content($user, $view->cod_interactive_type, TRUE);
      if (!empty($authored)) {
        $unscheduled_bofs = TRUE;
      }
    }
  }

  // Arrange slots by days.
  // @todo Give plugin options for date formats and text?
  $arranged_slots = array();
  foreach ($slots as $slot) {
    // Do not fill slots on non-interactive schedules that are not in use.
    if (!$view->cod_schedule_interactive && !in_array($slot->nid, $used_slots)) {
      continue;
    }
    // Make formatted times.
    $time_format = cod_session_time_slot_format($slot);
    $day_key = date_format_date($time_format['date_start'], 'custom', 'Y-m-d');
    $timestamp = date_format_date($time_format['date_start'], 'custom', DATE_FORMAT_UNIX);
    $arranged_slots[$day_key][$timestamp] = array(
      'nid' => $slot->nid,
      'start' => $time_format['formatted_start'],
      'end' => $time_format['formatted_end'],
      'class' => '',
      'bofs' => $slot->field_slot_bofs,
    );
    // If interactive and row is empty include a class.
    if ($view->cod_schedule_interactive && !in_array($slot->nid, $used_slots)) {
      $arranged_slots[$day_key][$timestamp]['class'] = 'empty';
    }
    // Hold onto what slots go with a day_key so the empty rooms for a day can
    // be easily calculated.
    $days_slots[$day_key][] = $slot->nid;
    if (!isset($days[$day_key])) {
      $days[$day_key] = date_format_date($time_format['date_start'], 'custom', 'l F jS, Y');
    }
  }

  // Sort the arranged slots.
  cod_session_ksort_recurse($arranged_slots);

  // Calculate unused rooms in each day. Unused rooms will be left off the grid
  // if the room is not interactive and will be showing (to allow scheduling) if
  // it is.
  $empty_rooms = $show_rooms = array();
  if (!empty($days_slots)) {
    foreach ($room_nids as $room_nid) {
      foreach ($days_slots as $day_key => $day_slots) {
        $intersect = array();
        if (!empty($used_rooms[$room_nid])) {
          $intersect = array_intersect($used_rooms[$room_nid], $day_slots);
        }
        if (empty($intersect)) {
          // Room not used on this day.
          $empty_rooms[$day_key][$room_nid] = TRUE;
          if ($view->cod_schedule_interactive) {
            $show_rooms[$day_key][$room_nid] = TRUE;
          }
          else {
            $show_rooms[$day_key][$room_nid] = FALSE;
          }
        }
        else {
          // Room is in use, so show it.
          $show_rooms[$day_key][$room_nid] = TRUE;
        }
      }
    }
  }

  $single_node_types = cod_session_single_schedulable_types();

  // @todo get rooms for each day?
  // Build schedule grid array. This is the final processing before handing over
  // to the tpl file.
  $schedule_grid = array();
  if (!empty($days)) {
    // For each day...
    foreach ($days as $day_key => $day_title) {
      $schedule_grid[$day_key] = array();
      // For each slot...
      foreach ($arranged_slots[$day_key] as $slot_key => $slot) {

        // Check if slot is set to Allow BoFs
        if (!empty($slot['bofs']) && $slot['bofs'][LANGUAGE_NONE][0]['value'] == 0) {
          unset($arranged_slots[$day_key][$slot_key]);
          continue;
        }

        $schedule_grid[$day_key][$slot['nid']] = array();

        // For each room. $room_key is used for determing colspans.
        foreach ($room_nids as $room_key => $room_nid) {
          // Leave out empty rooms on non-interactive schedules.
          if (!$view->cod_schedule_interactive && !empty($empty_rooms[$day_key][$room_nid])) {
            continue;
          }
          // Collect sessions and availability and call-to-schedule information.
          // The tpl file determines what to print. @todo make that determination here?

          // Now at the level of depth of session_grid, that is [slot][room].
          // If we have not already marked this room/slot combo as spanned, continue forward.
          if (empty($schedule_grid[$day_key][$slot['nid']][$room_nid])) {
            $schedule_grid[$day_key][$slot['nid']][$room_nid]['sessions'] = array();
            $schedule_grid[$day_key][$slot['nid']][$room_nid]['class'] = '';
            $schedule_grid[$day_key][$slot['nid']][$room_nid]['spanned'] = FALSE;

            $available = $rooms[$room_nid]['capacity'];

            // Check $item_grid for if items exists in this slot.
            if (!empty($item_grid[$slot['nid']][$room_nid])) {
              $colspan = 1;
              // Record the session(s) in this room and slot.
              // $item_grid[slot][room] is an array of sessions. Store sessions
              // in $schedule_grid at [day][slot][room]['sessions'].
              $schedule_grid[$day_key][$slot['nid']][$room_nid]['sessions'] = $item_grid[$slot['nid']][$room_nid];
              // Count scheduled items.
              $available = $available - count($item_grid[$slot['nid']][$room_nid]);
              // Check for single item, to set uniqueness and colspan.
              if (count($item_grid[$slot['nid']][$room_nid]) == 1) {
                $this_session = current($item_grid[$slot['nid']][$room_nid]);
                // Exclusive content types override non-exclusive.
                $this_exclusive = variable_get('cod_unique_' . $this_session['session']->type, COD_SCHEDULE_SINGLE);
                if ($this_exclusive == COD_SCHEDULE_SINGLE) {
                  $available = 0;
                }

                // This slot has only one session, calculate colspans in time slot (row).
                // @todo consider if session is in this and not next sequential room?
                // Check for sessions in remaining rooms.
                for ($i = $room_key + 1; $i < count($room_nids); $i++) {
                  if (!empty($item_grid[$slot['nid']][$room_nids[$i]]) && count($item_grid[$slot['nid']][$room_nids[$i]]) == 1) {
                    $adjacent = current($item_grid[$slot['nid']][$room_nids[$i]]);
                    // Check to see if adjacent column matches.
                    if ($this_session['session']->nid == $adjacent['session']->nid) {
                      // We'll accommodate for this in the markup.
                      $colspan++;
                      // Mark the room/slot combo as spanned from the previous slot.
                      $schedule_grid[$day_key][$slot['nid']][$room_nids[$i]]['spanned'] = TRUE;
                      // Don't process adjacent room when setting schedule grid.
                      unset($item_grid[$slot['nid']][$room_nids[$i]]);
                    }
                    else {
                      // Adjacent session does not match.
                      break;
                    }
                  }
                  else {
                    // Only consider those which are adjacent.
                    break;
                  }
                }
              }

              // Set colspan.
              $schedule_grid[$day_key][$slot['nid']][$room_nid]['colspan'] = $colspan;
            }
          }

          // Check if there are any nodes with COD_SCHEDULE_SINGLE assigned to this room and time
          // It is already by default that the room is not available if the session is COD_SCHEDULE_SINGLE
          if ($view->cod_schedule_interactive && $available) {
            $query = new EntityFieldQuery();
            $entities = $query->entityCondition('entity_type', 'node')
            ->propertyCondition('type', $single_node_types, 'IN')
            ->fieldCondition('field_session_room', 'target_id', $room_nid)
            ->fieldCondition('field_session_slot', 'target_id', $slot['nid'])
            ->propertyCondition('status', 1)
            ->range(0,1)
            ->execute();
            if (count($entities) > 0) {
              $available = 0;
            }
          }

          // Include room availability and call-to-action if this is an interactive
          // schedule and user is allowed to create and schedule.
          if ($view->cod_schedule_interactive && cod_session_schedule_access($view->cod_interactive_type, $user)) {
            $type_url_str = str_replace('_', '-', $view->cod_interactive_type); // Oh, Drupal.
            if ($available <= 0) {
              $availability = ''; // Do not display anything if the room is full.
              $schedule_grid[$day_key][$slot['nid']][$room_nid]['class'] .= ' full';
            }
            else {
              $availability = t('@avail of @cap slots available', array('@avail' => $available, '@cap' => $rooms[$room_nid]['capacity']));
              // There is availability so provide a call-to-action for scheduling.
              $options = array(
                'query' => array(
                  // The session room field is unlimited so it would be rendered as
                  // checkboxes but because it's being altered by cod_bof set the
                  // Prepopulate arguments to what it will be, a select list.
                  'edit[field_session_room][nid][nid]' => $room_nid,
                  'edit[field_session_slot][nid][nid]' => $slot['nid'],
                  'destination' => $_GET['q'], // @todo may be menu tab depth?
                ),
              );
              // If the user has unscheduled items or has not submitted any
              // they are given a link to add and otherwise a link to schedule.
              if (!$authored || !$unscheduled_bofs) {
                $cta = l(t('Add a @name', array('@name' => $node_types[$view->cod_interactive_type]->name)), 'node/add/' . $type_url_str, $options);
              }
              else {
                $cta = l(t('Schedule a @name', array('@name' => $node_types[$view->cod_interactive_type]->name)), 'scheduler-form/' . $view->cod_interactive_type, $options);
              }
              $schedule_grid[$day_key][$slot['nid']][$room_nid]['cta'] = $cta;
              $schedule_grid[$day_key][$slot['nid']][$room_nid]['class'] .= ' available';
            }
            // Include availability message.
            $schedule_grid[$day_key][$slot['nid']][$room_nid]['availability'] = $availability;
          }
        }
      }
    }

    $vars['days'] = $days;
  }

  $vars['view_results'] = $view_results;
  $vars['session_grid'] = $item_grid;
  $vars['arranged_slots'] = $arranged_slots;
  $vars['schedule_grid'] = $schedule_grid;
  $vars['day_links'] = $day_links;
  $vars['rooms'] = $rooms;
  $vars['room_nids'] = $room_nids;
  $vars['show_rooms'] = $show_rooms;
  $vars['schedule_display'] = 0; //$view->cod_schedule_display;
}
